Функция СведенияОВнешнейОбработке() Экспорт
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;
	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений = Новый Массив;
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	// Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
	// Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
	// которые поддерживают механизм ВПФ
	МассивНазначений.Добавить("Документ.РеализацияТоваров");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Товарный чек");
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", "1.0");    
	ПараметрыРегистрации.Вставить("Информация", "Товарный чек");
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	// Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Товарный чек", "ТоварныйЧек", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

// Интерфейс для выполнения команд обработки.
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//ТабличныйДокумент = СформироватьПечатнуюФормуНакладная(МассивОбъектов, ОбъектыПечати, Неопределено, Неопределено);
	//
	//КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабличныйДокумент;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек",
				"Товарный чек",
				ПечатьЧека(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

КонецПроцедуры

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьЧека(МассивОбъектов, ОбъектыПечати) Экспорт

	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Чек ККМ'");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧекаККМ_ТоварныйЧек";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Магазин КАК Магазин,
	//|	Документ.ВидОперации КАК ВидОперации,
	//|	ВЫБОР
	//|		КОГДА Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	|	Ложь КАК ЭтоВозврат,
	|	ВЫБОР КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(Документ.Организация)
	|		ИНАЧЕ &ТекстИП +
	|		    ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Фамилия, """") = """"
	|				ТОГДА """"
	|			ИНАЧЕ
	|				ФИОФизЛицСрезПоследнихИП.Фамилия + &ТекстПробел +
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Имя, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ФИОФизЛицСрезПоследнихИП.Имя + &ТекстПробел
	|				КОНЕЦ
	|				+
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Отчество, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ФИОФизЛицСрезПоследнихИП.Отчество
	|				КОНЕЦ
	|			КОНЕЦ
	|			+ """"
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ВЫБОР КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Организация,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный
	|ИЗ
	|	Документ.РеализацияТоваров КАК Документ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних() КАК ФИОФизЛицСрезПоследнихИП
	|ПО
	|	Документ.Организация = ФИОФизЛицСрезПоследнихИП.ФизЛицо
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка, Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплата.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаОплата.ВидОплаты.ТипОплаты) КАК ПредставлениеТипОплаты,
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			И ТаблицаОплата.ВидОплаты.ТипОплаты <> Значение(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ТОГДА ТаблицаОплата.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаБезналичныхОплат,
	|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка В(&МассивОбъектов)
	|	И ТаблицаОплата.Ссылка.Проведен
	|	И НЕ (ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат) И ТаблицаОплата.ВидОплаты.ТипОплаты = Значение(Перечисление.ТипыОплатЧекаККМ.Наличные))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.Ссылка,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты
	|
	|	ИМЕЮЩИЕ
	|		(НЕ СУММА(ТаблицаОплата.Сумма) = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	" + ?(ВыводитьКоды, "ТаблицаТовары.Номенклатура." + КолонкаКодов +" КАК КолонкаКодов,", "") + "
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	УстановитьТекстовыеПараметрыЗапроса(Запрос);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекККМ.ПФ_MXL_Накладная");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПоставщик = Макет.ПолучитьОбласть("Поставщик");
	ОбластьИНН       = Макет.ПолучитьОбласть("ИНН");
	ОбластьМагазин   = Макет.ПолучитьОбласть("Магазин");
	
	ОбластьШапкаНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьШапкаКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьШапкаДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьШапкаСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьШапкаСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	ОбластьСтрокаНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьСтрокаКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьСтрокаДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСтрокаСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСтрокаСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	// Вывести Итого.
	ОбластьИтогоНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьИтогоКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьИтогоДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьИтогоСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьИтогоСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
	
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	
	ОбластьОплата = Макет.ПолучитьОбласть("Оплата");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнойЧастиОплата = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоТабличнымЧастям = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			СинонимДокумента   = НСтр("ru='Товарный чек (возврат)'");
		Иначе
			СинонимДокумента   = НСтр("ru='Товарный чек'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		СведенияОПоставщике = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Дата);
		
		Если ВыборкаПоДокументам.ОрганизацияЮридическоеЛицо Тогда
			ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование");
		Иначе
			ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ВыборкаПоДокументам.НаименованиеОрганизации;
		КонецЕсли;
		ОбластьПоставщик.Параметры.Поставщик = ВыборкаПоДокументам.Организация;
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		

		ОбластьИНН.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ТабличныйДокумент.Вывести(ОбластьИНН);

		ОбластьМагазин.Параметры.ПредставлениеМагазина = ВыборкаПоДокументам.МагазинПредставление;
		ОбластьМагазин.Параметры.Магазин = ВыборкаПоДокументам.Магазин;
		ТабличныйДокумент.Вывести(ОбластьМагазин);
		
		// Шапка
		
		ТабличныйДокумент.Вывести(ОбластьШапкаНомера);
		Если ВыводитьКоды Тогда
			ОбластьШапкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьШапкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаДанных);
		ТабличныйДокумент.Присоединить(ОбластьШапкаСкидок);
		ТабличныйДокумент.Присоединить(ОбластьШапкаСуммы);
		
		
		ВсегоНаименований = 0;
		Сумма             = 0;
		ВсегоСкидок       = 0;
		ВсегоБезСкидок    = 0;
		
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьСтрокаНомера.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);

			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
				
			КонецЕсли;

			ОбластьСтрокаДанных.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаДанных);
			
			Скидка = ВыборкаПоСтрокамТЧ.Цена * ВыборкаПоСтрокамТЧ.Количество - ВыборкаПоСтрокамТЧ.Сумма;
			ОбластьСтрокаСкидок.Параметры.Скидка         = Скидка;
			ОбластьСтрокаСкидок.Параметры.СуммаБезСкидки = ВыборкаПоСтрокамТЧ.Сумма + Скидка;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСкидок);

			ОбластьСтрокаСуммы.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСуммы);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
			Сумма          = Сумма + ВыборкаПоСтрокамТЧ.Сумма;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма + ВсегоСкидок;
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьИтогоНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьИтогоКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьИтогоДанных);
		ОбластьИтогоСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьИтогоСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабличныйДокумент.Присоединить(ОбластьИтогоСкидок);
		ОбластьИтогоСуммы.Параметры.Всего = Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтогоСуммы);
		
		// Вывести Сумму прописью.
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%'");
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(Сумма));
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(Сумма);
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		// Оплата
		Если ВыборкаПоТабличнойЧастиОплата.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			ОплатаДобавлена = Ложь;
			СтрокаОплаты = "";
			СуммаБезналичныхОплат = 0;
			СуммаОплат = 0;
			
			ВыборкаПоОплата = ВыборкаПоТабличнойЧастиОплата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоОплата.Следующий() Цикл
				Если ОплатаДобавлена Тогда
					СтрокаОплаты = СтрокаОплаты + Символы.ПС;
				КонецЕсли;
				ОплатаДобавлена = Истина;
				СтрокаОплаты = СтрокаОплаты + ВыборкаПоОплата.ПредставлениеТипОплаты + ": "  + Формат(ВыборкаПоОплата.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				СуммаБезналичныхОплат = СуммаБезналичныхОплат + ВыборкаПоОплата.СуммаБезналичныхОплат;
				СуммаОплат = СуммаОплат + ВыборкаПоОплата.Сумма;
			КонецЦикла;
			
			Если ВыборкаПоДокументам.ЭтоВозврат Тогда
				СуммаНаличных = ВыборкаПоДокументам.СуммаДокумента - СуммаБезналичныхОплат;
				Если СуммаНаличных > 0  Тогда
					Если ОплатаДобавлена Тогда
						СтрокаОплаты = СтрокаОплаты + Символы.ПС;
					КонецЕсли;
					СтрокаОплаты = СтрокаОплаты + НСтр("ru = 'Наличные:'") + " " + Формат(СуммаНаличных, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КонецЕсли;
				ОбластьОплата.Параметры.Сдача = "0.00";
			Иначе
				ОбластьОплата.Параметры.Сдача = Формат(СуммаОплат - ВыборкаПоДокументам.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			КонецЕсли;
			
			ОбластьОплата.Параметры.Оплата = СтрокаОплаты;
			ТабличныйДокумент.Вывести(ОбластьОплата);
		КонецЕсли;
		
		
		// ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ФИО = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

Процедура УстановитьТекстовыеПараметрыЗапроса(Запрос)
	
	Запрос.УстановитьПараметр("ТекстИП"    , НСтр("ru = 'ИП'") + " ");
	Запрос.УстановитьПараметр("ТекстПробел", " ");
	Запрос.УстановитьПараметр("ТекстТочка" , ".");
	
КонецПроцедуры

